#include <socket/extension.h>
#include "libgohello.h" // Include the header file generated by Go

extern "C"
{
  void StartServer();
  void ShutdownServer();
  GoInt GetServerPort();
}

void onGetPort(
    sapi_context_t *context,
    sapi_ipc_message_t *message,
    const sapi_ipc_router_t *router)
{
  auto result = sapi_ipc_result_create(context, message);
  auto port = GetServerPort();

  sapi_ipc_result_set_json_data(
      result,
      sapi_json_any(sapi_json_number_create(context, port)));

  sapi_ipc_reply(result);
}
void onShutdown(
    sapi_context_t *context,
    sapi_ipc_message_t *message,
    const sapi_ipc_router_t *router)
{
  ShutdownServer();
}
void onStart(
    sapi_context_t *context,
    sapi_ipc_message_t *message,
    const sapi_ipc_router_t *router)
{
  StartServer();
}

bool initialize(sapi_context_t *context, const void *data)
{
  if (sapi_extension_is_allowed(context, "ipc_router_map"))
  {
    StartServer();
    sapi_ipc_router_map(context, "pty.port", onGetPort, data);
    sapi_ipc_router_map(context, "pty.shutdown", onShutdown, data);
    sapi_ipc_router_map(context, "pty.start", onStart, data);
  }
  return true;
}

bool deinitialize(sapi_context_t *context, const void *data)
{
  if (sapi_extension_is_allowed(context, "ipc_router_unmap"))
  {
    ShutdownServer();
    sapi_ipc_router_unmap(context, "pty.port");
    sapi_ipc_router_unmap(context, "pty.shutdown");
    sapi_ipc_router_unmap(context, "pty.start");
  }
  return true;
}

SOCKET_RUNTIME_REGISTER_EXTENSION(
    "pty-server",
    initialize,
    deinitialize,
    "An extension to provide PTY over a go websocket server",
    "1.0.0");